"""
定义 f(x, y, w) = 3x + 2y - w - 1


求 f(1, 2, 3)  # 3
求 f(2, 1, 3)  # 4
求 f(3, 2, 1)  # 11
----------------------------------
内置函数: Python官方在builtins模块下直接定义好的函数, 它们可以直接拿来使用, 比如: print, ...

形参: 形式参数, 函数在定义时声明的参数
实参: 实际参数, 函数在调用时传入的参数
函数体: 函数在执行时要做的事情
缩进: 行开头处的空白, 用来表示代码的层级关系, 一次缩进通常是4个空格(Tab / Shift + Tab)
缩进通常出现在复合语句中, 比如: 函数的定义, 类的定义, 条件语句, 循环语句, ...
缩进是属于Python语法的一部分, 不正确的缩进可能会影响程序的执行逻辑, 甚至可能导致程序出错

函数在定义时, 不会执行函数体; 当函数被调用时, 才会执行函数体
函数只需要定义一次, 就可以被多次调用
每次函数调用时, 会先将实参传递给形参, 然后再执行函数体

obj()  表示调用该obj

函数是否有返回值, 取决于关键字return
函数没有返回值, 等价于return None
return的作用:
- 将return后面跟着的对象返回给函数调用方, 那么调用方就会变成该对象
- 结束return所在的函数

定义函数的格式:
def func_name([arg1, arg2, ..., argN]):
    func_body


调用函数的格式:
func_name([实参1, 实参2, ..., 实参N])
"""


# def f(x, y, w):
#     return 3 * x + 2 * y - w - 1


# res = f(1, 2, 3)
# print(res)
# print(res / 2)
# print(res ** 2)
# print(res - 1)
# print(res + 100)


# print(f(1, 2, 3))
# print(f(1, 2, 3) / 2)
# print(f(1, 2, 3) ** 2)
# print(f(1, 2, 3) - 1)
# print(f(1, 2, 3) + 100)


# def f(x, y, w):
#     print(3 * x + 2 * y - w - 1)
#     print(x - y)
#     print(y ** w)
#     print(y / w + 1)


# def f(x, y, w):
#     print(3 * x + 2 * y - w - 1)
#
#
# res = f(1, 2, 3)  # res = None
# print(res)  # None


"""
传位置参数: 实参会按照从左往右的顺序依次传递给对应的形参
"""
# f(1, 2, 3)
# f(2, 1, 3)
# f(3, 2, 1)

"""
传关键字参数: 实参会按照指定的名称传递给同名的形参(和顺序无关)
"""
# f(x=1, y=2, w=3)
# f(y=2, x=1, w=3)
# f(w=3, y=2, x=1)

"""
注意: 关键字参数必须放在所有位置参数的后面
"""
# f(1, 2, w=3)
# f(1, y=2, w=3)
# f(1, w=3, y=2)

